function fecthSomething() {
    return Promise.resolve(1);
}

function getCors(start, end, fetchRouts) {
    const left = [];
    const right = [];
    let isLeft = true;

    fecthSomething.then

    return new Promise((resolve) => {
        fetchRouts(start).then((cors) => {
            new Promise((res) => {});
        });
    });
}

module.exports = getCors;

// Отпуск Иннокентия (30 баллов)
// Бухгалтер Иннокентий решил срочно отдохнуть в Казахстане, однако прямой билет до Казахстана стоит очень дорого и приходится искать составной маршрут на автобусах. Помогите Иннокентию написать функцию, которая поможет составить последовательность маршрутов на автобусах до Казахстана.

// Функция принимает на вход пункт выезда, пункт приезда и функцию поиска билетов. Функция должна вернуть promise, который принимает решение: - массивом из всех остановок (например, ['A', 'B', 'C']); - или строкой 'no ticket', если до пункта назначения добраться нельзя.

// Иннокентий уверен, что составной маршрут или отсутствует, или является единственно возможным (нет ромбовидных перелетов и циклов).

// Не получится найти несколько маршрутов параллельно, а также пользоваться async/await и генераторами.

// Интерфейс поиска маршрута:

// // Возвращает список городов, до которых можно добраться из заданного.
// function fetchRouts(departurePoint: string): Promise<string[]>;
// Решение необходимо предоставить в виде CommonJS-модуля:

// module.exports = function (start, end, fetchRouts) {
//     // Your code here.
//     // ...
//     return Promise.resolve('no ticket');
//     return Promise.resolve(['A', 'C', 'D']);
// };
// Вердикт RE также означает, что отправленное решение неверно.

// Необходимо построить маршрут из пункта A в пункт D.

// Формат вывода
// ['A', 'B', 'D']

// 1) рейсы для А: В и C;

// fetchFlights('A') => ['B', 'C']
// 2) рейсы для B: D;

// fetchFlights('B') => ['D']
// 3) рейсы для C: D;

// fetchFlights('C') => []
// 4) составной билет найден ['A', 'B', 'D']
