function getText(inputData, inputDictionary) {
    const names = new Set(inputDictionary);
    const sorted = inputData.sort((a, b) => {
        const corA = a.geometry[0];
        const corB = b.geometry[0];

        return corA - corB;
    });
    let result = [];

    for (let index = 0; index < sorted.length; index++) {
        const { text } = sorted[index];
        if (names.has(text)) {
            result.push(text);
        } else {
            return 'Unreadable message';
        }
    }

    return result.join(' ');
}

const data = [
    {
        geometry: [10, 20],
        text: 'Jimmy',
    },
    {
        geometry: [20, 40],
        text: 'Slow',
    },
    {
        geometry: [5, 40],
        text: 'Slow',
    },
];
const dictionary = ['Jimmy', 'Slow'];

console.log(getText(data, dictionary));

module.exports = getText;

// Агенство "Быстрый Лемур" (40 баллов)
// Открылось новое агентство, в котором работают межгалактические роботы-лемуры, называется оно «Быстрый Лемур» - принцип работы агентства «одно касание». Заказчик приносит список работ, где указывает приоритет каждой из них. После это роботы-лемуры забирают задачи и вешают табличку «На базе». На базе они производят контроль выполнения задач других роботов-лемуров, а после выполнения отдают квитанцию и отчет о выполнении на руки заказчику. Выгода для заказчика проявляется в том, что оплатить ему нужно только фактическое время работы робота-лемуров. Для того, чтобы клиенты заранее могли посчитать расход на услуги агентства, вам нужно реализовать симулятор процесса (фактической работы) роботов-лемуров.

// Формат ввода
// Задачи для исполнения от заказчика имеют следующий формат:

// const task = {
//     // строка, уникальный идентификатор задачи
//     id: "a1",
//     // число, приоритет задачи (от 1 до 1024)
//     priority: 10,
//     // функция, возвращающая Promise;
//     // Promise может быть resolved через длительное время
//     job: () => {
//         return new Promise((resolve, reject) => {
//             if (...) {
//                 ...
//                 resolve();
//             } else reject();
//         });
//     }
// };
// Приоритет задачи --- целое число. Чем больше число, тем больший приоритет у задачи. Вам нужно реализовать класс TaskManager со следующими методами:

// class TaskManager {
//     constructor(
//         N // общее число роботов-исполнителей (от 1 до 1024)
//     );
//     // Добавление задачи в очередь
//     addToQueue(
//         task // задача для исполнения, см. формат выше
//     );
//     // Promise, который запускает процесс выполнения задач и выдаёт список отчётов
//     run();
// }

// module.exports = { TaskManager };
// У робота две фазы работы:

// Получение задач в очередь. В этот момент синхронно или асинхронно в очередь добавляются задачи при помощи вызова метода addToQueue. Количество задач не ограничено.

// Выполнение задач после вызова метода run. Все полученные ранее задачи берутся на выполнение. Свободные роботы берут задачи из очереди: самая приоритетная задача берётся первой, далее --- по уменьшению приоритета и по времени поступления задачи в очередь.

// Каждый робот в процессе формирует отчёт о выполнении работ:

// {
//     // число — общее количество выполненных успешно задач
//     successCount: 2,
//     // число — общее количество невыполненных задач
//     failedCount: 1,
//     // массив строк — идентификаторы взятых задач по очереди
//     tasks: ["a1", "c3", "d4"],
//     // число — количество проведённых в работе миллисекунд
//     timeSpent: 203,
// }
// Задача может выполниться неуспешно (reject). Если успешно, то робот добавляет единицу в статистику к successCount. Если задача выполнилась неуспешно, то добавляет единицу к failedCount. Задача всё равно попадает в итоговый отчёт и учитывается в итоговом времени работы робота.

// Формат вывода
// Метод run менеджера возвращает Promise, который при resolve возвращает отчёт о проделанной работе в виде массива отчётов каждого робота:

// [
//     { 
//         successCount: 2,
//         failedCount: 0,
//         tasks: ["a1", "d4"],
//         timeSpent: 203,
//     }, // отчёт робота номер 1
//     ...,
//     { 
//         successCount: 1,
//         failedCount: 1,
//         tasks: ["b2", "c3"],
//         timeSpent: 10,
//     }, // отчёт робота номер N
// ]
// Примечание
// Примерный код для тестирования задачи:

// (async () => {
//     const generateJob = (id) =>
//         function () {
//             return new Promise((resolve, reject) => {
//                 setTimeout(() => {
//                     Math.random() > 0.8 ? resolve() : reject();
//                 }, Math.random() * 2000);
//             });
//         };

//     const tm = new TaskManager(3);

//     tm.addToQueue({
//         id: "id0",
//         priority: 10,
//         job: generateJob("id0"),
//     });
//     tm.addToQueue({
//         id: "id1",
//         priority: 1,
//         job: generateJob("id1"),
//     });
//     tm.addToQueue({
//         id: "id2",
//         priority: 10,
//         job: generateJob("id2"),
//     });
//     tm.addToQueue({
//         id: "id3",
//         priority: 5,
//         job: generateJob("id3"),
//     });

//     const report = await tm.run();
//     console.log(report);
// })();